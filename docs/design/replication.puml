@startuml Followertion

participant "Unknown Role Node" as urn
participant "Leader" as l
participant "Follower" as f
participant "Placement Driver" as pd

== syncsnapshot <slot_id> ==
autonumber
f -> l: 请求想要的slot， 如果是第一次建立建立连接 发送 `u16_MAX`
l -> f: leader 处理发送

== synccmd ==
autonumber
l -> l: 收到synccmd, 创建缓冲区，并且把binlog依次转发
loop
   l -> f: 转发 binlog (包括缓冲区的)
   f -> f: 收到binlog, 丢到本地的一个channel中，异步消费
   f -> f: 读取并判断
   opt binlog处理开关open && binlog的write_id 大于 Follower本地replica_write_id
      f -> f: 关闭binlog处理开关, await，等待notify
      f -> l: 发送"snapshot <slot_id>", 请求Leader的snapshot
      l -> f: list<slot_id,data>
      f -> f: 处理完snapshot，打开binlog处理开关, 并且notify
   end
   f -> l: 每秒有一次心跳
   f -> f: 发现断开，清理掉当前复制任务的task，重新建立连接发送 synccmd
end

note over l
   1. 在没有Follower的时候，Leader没有缓冲区
   1. 从节点本地维护一个 replica_write_id<slot, id>
   1. 转发binlog的时候携带write_id, 用于Follower丢弃没用(write_id小于本地replica_write_id)的数据
end note

== server 感知到 leader变化 ==
autonumber
urn -> pd: 发现自己的leader变了
urn -> f: 自己变成follower
f -> f: 如果之前就是follower，把之前的复制task停掉, 根据新的leader重新开始
f -> f: 清空replica_write_id

== follower 变 leader ==
autonumber
f -> pd: 发现自己变成leader了
l -> l: 只读变读写, 停掉之前的follow task

@enduml